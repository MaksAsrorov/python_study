# # a = int(input())
# # b = int(input())
# # while n>9:
# #     n = n//10 + n%10
# # print(n)
# #
# #///////
# # –ø–æ–∏—Å–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π
# # n = int(input())
# # for i in range (1, n+1):
# #     if n%i==0:
# #        print(i)
# # a = int(input())
# # b = int(input())
# #
# # sum = 0
# # total = 0
# #
# # max_digit = 0
# #
# # for n in range (a, b+1):
# #       for k in range (1, n+1):
# #           if n%k==0:
# #             sum += k
# #       if sum >= total:
# #           total = sum
# #           max_digit = n
# #       sum = 0
# #
# # print(max_digit, total, end=' ')
# #
# #
# #
#
#
#
#
#
# n = int(input())
# for i in range (1, n+1):
#     if n%i==0:
#        print(i)
#

# s = 'All you need is love'
# if 'love' in s:
#     print('‚ù§Ô∏è')
# else:
#     print('üíî')

# text = "Such a lovely place"
#
# for index in range(len(text)):
#     print(text[index])

# text = "Such a lovely place"
#
# for letter in text:
#     print(letter)

# alphabet = "abcdefghijk"
#
# for letter in alphabet:
#     print(letter)

# n = input()
#
# for index in range (-len(n), 0, 1):
#     print(n[index], index)
#

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É —Ü–∏—Ñ—Ä –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

# n = input()
# total = 0
#
# for index in range (0, len(n)):
#     total += int(n[index])
# print(total)


# n = input()
# counterX = 0
# counterP = 0
#
# for index in range (0, len(n)):
#     if n[index] == '*':
#         counterX += 1
#     if n[index] == '+':
#         counterP += 1
# print("–°–∏–º–≤–æ–ª + –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è", counterP, "—Ä–∞–∑")
# print("–°–∏–º–≤–æ–ª * –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è", counterX, "—Ä–∞–∑")
# n = input()
# counter = 0
#
# for index in range ((len(n)-1)):
#     if n[index]==n[index+1]:
#         counter+=1
# print(counter)

# –∑–∞–≤–µ–ª–∏ —Å—á–µ—Ç—á–∏–∫
# - –ø—Ä–æ—Ö–æ–¥–∏–º for –ø–æ len(—Å—Ç—Ä–æ–∫–∏) - 1
# - –≤ if —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏[i] —Å —Å—Ç—Ä–æ–∫–∏[i + 1]
# - —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—á–µ—Ç—á–∏–∫

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ 25
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ 24

# n =input()
# counter_g = 0
# counter_s = 0
#
# for index in range (0, len(n)):
#     if n[index] in '–∞—É–æ—ã–∏—ç—è—é—ë–µ–ê–£–û–´–ò–≠–Ø–Æ–Å–ï':
#         counter_g += 1
#     if n[index] in '–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â–ë–í–ì–î–ñ–ó–ô–ö–õ–ú–ù–ü–†–°–¢–§–•–¶–ß–®–©':
#         counter_s +=1
#
# print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ', counter_g)
# print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ', counter_s)

# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[::])

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.


#
# if s[:] == s[::-1]:
#     print('YES')
# else:
#     print('NO')

#
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç:
#


# —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º.


# s = input()
# #
# # # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ;
# #
# total_digit = 0
# for index in range(0, len(s)):
#     total_digit +=1
# print(total_digit)
#
# # –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—É—é 3 —Ä–∞–∑–∞;
# for i in range(0, 3):
#     print(s, end='')
#
# # –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏;
# print('')
# print(s[0])
#
# # –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏;
# print(s[:3])
# #
# # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏;
# print(s[-3:])
#
# # —Å—Ç—Ä–æ–∫—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ;
# print(s[::-1])
#
# # —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º.
# print(s[1:-1])
#
#
#
#
# s = input()

# # # —Ç—Ä–µ—Ç–∏–π —Å–∏–º–≤–æ–ª —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏;
# print(s[2])
# #
# # # –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏;
# print(s[-2])
# #
# # # –ø–µ—Ä–≤—ã–µ –ø—è—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏;
# print(s[:5])
# #
# # # –≤—Å—é —Å—Ç—Ä–æ–∫—É, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤;
# print(s[:-2])
# #
# # # –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å —á–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏;
# print(s[::2])
# #
# # # –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏;
# for index in range (0, len(s)):
#     if index%2==1:
#         print(s[index], end='')
#
# # # –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ;
# print('')
# print(s[::-1])

# –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.
# print(s[::-2])

# s = input()
#
# if len(s)%2==0:
#     print((s[(len(s)//2):]) + (s[:(len(s)//2)]))
# else:
#     print((s[(len(s)//2)+1:]) + (s[:(len(s)//2)+1]))

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
#

# s = '–ú–∞–∫—Å–∏–º –ê—Å—Ä–æ—Ä–æ–≤'
#
# if s == s.title():
#     print("YES")
# else:
#     print("NO")

# s = input()
#
# print(s.swapcase())

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç—Ç–µ–Ω–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Ö–æ—Ä–æ—à–∏–º –∏–ª–∏ –Ω–µ—Ç.
# –¢–µ–∫—Å—Ç –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–π –æ—Ç—Ç–µ–Ω–æ–∫, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É ¬´—Ö–æ—Ä–æ—à¬ª –≤–æ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
#
# s = input()
#
# # for index in range(0, len(s)):
# if '—Ö–æ—Ä–æ—à' in s.lower():
#     print('YES')
# else:
#     print('NO')

# —è –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —Ç–µ–∫—Å—Ç =)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

# s = input()
# counter = 0
#
# for index in range (0, len(s)):
#     if s[index] == s[index].lower() and s[index] not in '1234567890':
#         counter +=1
#
# print(counter)

# s = input()
# print(s.count(' ')+1)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ –ê (–∞–¥–µ–Ω–∏–Ω), –ì (–≥—É–∞–Ω–∏–Ω), –¶ (—Ü–∏—Ç–æ–∑–∏–Ω), –¢ (—Ç–∏–º–∏–Ω).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –∞–¥–µ–Ω–∏–Ω–∞, –≥—É–∞–Ω–∏–Ω–∞, —Ü–∏—Ç–æ–∑–∏–Ω–∞ –∏ —Ç–∏–º–∏–Ω–∞ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∞.
#
# –ê–¥–µ–Ω–∏–Ω: 3
# –ì—É–∞–Ω–∏–Ω: 2
# –¶–∏—Ç–æ–∑–∏–Ω: 3
# –¢–∏–º–∏–Ω: 5
# –ê–∞–∞–ì–ì–¶–¶—Ü–¢–¢—Ç—Ç—Ç

# s = input().lower()
# print('–ê–¥–µ–Ω–∏–Ω:',  s.count('–∞'))
# print('–ì—É–∞–Ω–∏–Ω:',  s.count('–≥'))
# print('–¶–∏—Ç–æ–∑–∏–Ω:',  s.count('—Ü'))
# print('–¢–∏–º–∏–Ω:',  s.count('—Ç'))

# –î–∂–∏–º –•–æ–ø–ø–µ—Ä —Å –ø–æ–º–æ—â—å—é —Ä–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –û–¥–∏. –ù–∞ –ø—Ä–∏–µ–º–Ω–∏–∫ –µ–º—É –ø–æ—Å—Ç—É–ø–∞–µ—Ç n —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∫–æ–¥–∞ –ú–æ—Ä–∑–µ.
# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–≤ –∏—Ö, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ü–∏—Ñ—Ä –∏ —Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –ø—Ä–∏ —ç—Ç–æ–º –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –û–¥–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —á–∏—Å–ª–æ 11,
# –ø—Ä–∏—á–µ–º –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞. –ü–æ–º–æ–≥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –î–∂–∏–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –û–¥–∏

# n = int(input())
# counter = 0
#
# for i in range (0, n):
#     s = input()
#     if s.count('11') == 3:
#         counter += 1
# print(counter)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# s = input()
# counter = 0
#
# for index in range(0, len(s)):
#     if s[index] in '0123456789':
#         counter +=1
# print(counter)
#


# s = input()
#
# if s.endswith('.ru') or s.endswith('.com'):
#     print("YES")
# else:
#     print("NO")


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –±—É–∫–≤–∞ ¬´f¬ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –≤—ã–≤–µ–¥–∏—Ç–µ –µ—ë –∏–Ω–¥–µ–∫—Å.
# –ï—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–≤–∞ –∏ –±–æ–ª–µ–µ —Ä–∞–∑, –≤—ã–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –µ—ë –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ï—Å–ª–∏ –±—É–∫–≤–∞ ¬´f¬ª –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ ¬´NO¬ª.

# s = input()
# counter = s.count('f')
#
# if counter == 0:
#     print("NO")
# if counter == 1:
#     print(s.index('f'))
# if counter >= 2:
#     print((s.find('f')), (s.rfind('f')), end=' ')


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–∫–≤–∞ ¬´h¬ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ä–∞–∑–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –±—É–∫–≤—ã ¬´h¬ª, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏.

# s = input()
# print((s[:s.find('h')]) + (s[s.rfind('h')+1:]))

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ.

# aaaabbc

# s = input()
# total = 0
# str_total = ''
#
# for c in s:
#     if s.count(c) >= total:
#         total = s.count(c)
#         str_total = c
# print(str_total)

# first_name = '–ú–∞–∫—Å–∏–º'
# last_name = '–ê—Å—Ä–æ—Ä–æ–≤'
# age = '31'
# profession = 'engineer'
# affiliation = 'BeeGeek'
# print(f'Hello, {first_name} {last_name}. You are {age}. You are a {profession}. You were a member of {affiliation}')

# In 2010, someone paid 10k Bitcoin for two pizzas.¬ª (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)#
# year = 2010
# total = '10k'
# what = 'Bitcoin'
# s = 'In {0}, someone paid {1} {2} for two pizzas.'.format(year, total, what)
#
# print(s)


# for i in range (int(input()), int(input())+1):
#     print(chr(i), end='')

# s = input()
# for index in s:
#     print(ord(index), end=' ')

#
# n = int(input())
#
#
# for i in input():
#     decryption = (ord(i) - n)
#     if decryption < 97:
#         decryption += 26
#     print(chr(decryption), end='')

# s = 'Python rocks!'
# d=''
#
# for i in range (0, len(s)):
#     if i%3!=0:
#         d += s[i].replace(s[i], '')
# print(d)

# print(input().replace('@', ''))
# s = input()
# counter = 0
# #
# for i in s:
#     if i == 'f':
#         counter += 1
# if counter == 1:
#     print(-1)
# if counter == 0:
#     print(-2)
# if counter >=2:
#     d = s.replace('f', 'd', 1)
#     print(d.find('f'))


# s = 'abch54321h'
#
# # for index in range (0, len(s)):
# df = s.find('h')
# dl = s.rfind('h')
# temp = (s[df:dl])
# print(s[:df+1]+temp[::-1]+s[dl+1:])


# numbers = [2, 4, 6, 8, 10]
# languages = ['Python', 'C#', 'C++', 'Java']
# print(numbers)
# print(languages)

# numbers = list(range(1, int(input())+1))
# print(chr(numbers))


#
# print(ord('a'))
# (97, 122)

# numbers = list(range(1, int(input())+1))
# n = int(input())
# for i in range (0, n+1):
# numbers = chr(list(range(97, 123)))

# print(list(range(97, int(input())+97)))
# rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
#
#
# if ("Green" in rainbow):
#     index = rainbow.index("Green")
#     rainbow[index] = "–ó–µ–ª–µ–Ω—ã–π"
#
# if ("Violet" in rainbow):
#     index = rainbow.index("Violet")
#     rainbow[index] = "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"
#
# print(rainbow)

# rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
#
# rainbow[3] ='–ó–µ–ª–µ–Ω—ã–π'
# rainbow[-1] ='–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'
#
# print(rainbow)

# languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic', 'Bengali', 'Portuguese', 'Russian', 'Japanese', 'Lahnda']
# print(languages[::-1])
#
# –æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ (+) –∏ —É–º–Ω–æ–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (*), —Ç–∞–∫ —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫:
#
#  [1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13].

# numbers1 = [1, 2, 3]
# numbers2 = [6]
# numbers3 = [7, 8, 9, 10, 11, 12, 13]
#
# print(numbers1+numbers1 + (numbers2*9) + numbers3)

#
# numbers = [1, 1, 2, 3, 5, 8, 13]  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
#
# numbers.append(21)  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ 21 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
# numbers.append(34)  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ 34 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
#
# print(numbers)
#
# numbers = [0, 2, 4, 6, 8, 10]
# odds = [1, 3, 5, 7]
#
# numbers.extend(odds)
# print(numbers)

#
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# del numbers[5]    # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ—é—â–∏–π –∏–Ω–¥–µ–∫—Å 5
#
# print(numbers)


# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]

# print(len(numbers)) #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# print((numbers[-1])) #–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
# print(numbers[::-1]) #—Å–ø–∏—Å–æ–∫ –Ω–∞–æ–±–æ—Ä–æ—Ç
#
# if 5 in numbers and 17 in numbers:
#     print('YES')
# else:
#     print("NO")
#
# del numbers[0]
# del numbers[-1]
#
# print(numbers)


# massive = []
#
# for i in range(0, (int(input()))):
#     s = input()
#     massive.append(s)
#
# print(massive)

# abc = 'abcdefghijklmnopqrstuvwxyz'
# massive = []
# massive2 = []
#
# for i in range(len(abc)):
#     massive = abc[i] * (i + 1)
#     massive2.append(massive)
# print(massive2)


# n = int(input())  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤–µ—Å—Ç–∏ –≤ 3 —Å—Ç–µ–ø–µ–Ω—å
# massive = []
#
# for i in range(0, n):
#     massive.append(int(input()) ** 3)
# print(massive)

# n = int(input())
# massive = []
#
# for i in range(1, n + 1):
#     if n % i == 0:
#         massive.append(i)
# print(massive)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n
# n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å—É–º–º —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª (

# n = int(input())
# sp1 = []
# sp2 = []
#
# for i in range(n):
#     sp1.append(int(input()))
# for i in range (len(sp1) - 1):
#     sp2.append((sp1[i] + sp1 [i + 1]))
# print(sp2)


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫,
# –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ—è—â–∏–µ –ø–æ –Ω–µ—á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.


# sp1 = []
# sp2 = []
# for i in range(0, int(input())):
#     sp1.append(int(input()))
#     if i%2==0:
#         sp2.append(sp1[i])
#
# print(sp2)

# sp1 = []
#
# for i in range(0, int(input())):
#     sp1.append(int(input()))
#
# del sp1[1::2]
#
# print(sp1)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# n, –∞ –∑–∞—Ç–µ–º
# n —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.

# n = int(input())
# sp1 = []
#
# for i in range(0, n):
#    sp1.extend(input())
# print(sp1)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# n –∏
# n —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º —á–∏—Å–ª–æ
# k. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç
# k-—É—é –±—É–∫–≤—É –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
#

# n = int(input())
# sp1 = []
# sp2 = []
# sp3 = []
# for i in range(0, n):
#    sp1.extend(input())
# k = int(input())
#
# for c in range (0, len(sp1)):
#     sp2.extend(sp1)
#
# print(sp1)


# n = 'sjakdfkjsdhk'
#
# print(n[2])

# numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(*numbers)


# numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(*numbers, sep='\n')

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# total = 0
# for i in numbers:
#     total += i**2
# print(total)
# #

# n = int(input())
# sp1 = []
# sp2 = []
#
# for i in range (0, n):
#     x = int(input())
#     sp1.append(x)
#     sp2.append((x**2)+2*x+1)
#
# print(*sp1, sep='\n')
# print()
# print(*sp2, sep='\n')


# n = int(input())
# sp1 = []


# for i in range (0, n):
#     sp1.append(int(input()))
#
# sp1.remove(max(sp1))
# sp1.remove(min(sp1))
#
# print(*sp1, sep='\n')
#
# n = int(input())
# sp1 = []

# –ö–∞–∫-—Ç–æ –ª–µ–≥–∫–æ —Ä–µ—à–∏–ª —ç—Ç—É –∑–∞–¥–∞—á—É. –°–∞–º —É–¥–∏–≤–ª–µ–Ω.


# n = int(input())
# sp1 = []
#
# for i in range (n):
#     str = input()
#     if str not in sp1:
#         sp1.append(str)
#
# print(*sp1, sep='\n')


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.

#
# n = int(input())
# sp1 = []
# sp2 = []
#
# for i in range (n):
#     sp1.append(input())
#
# if input() in sp1:
#     for c in range (n):
#         sp2.append(sp1[c])


# print(sp2)
#
#
# n = int(input())
# sp1 = []
# sp2 = []
# sp3 = []
#
# for i in range(n):
#     sp1.append(input())
#
# x = input()
# for c in range(len(sp1)):
#     sp3.append(sp1[c].lower())
#     if sp3[c].find(x.lower()) != -1:
#         sp2.append(sp1[c])
# print(*sp2, sep='\n')


# n = int(input())
# sp1 = []
#
#
# for i in range(n):
#     sp1.append(int(input()))
#
# sp1.sort()
#
# print(*sp1, sep='\n')


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∑–∞—Ç–µ–º –Ω—É–ª–∏, –∞ –∑–∞—Ç–µ–º –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.

# n = int(input())
# sp = []
# so = []
# s0 = []
#
#
# for i in range(n):
#     x = int(input())
#     if x > 0:
#         sp.append(x)
#     if x < 0:
#         so.append(x)
#     if x == 0:
#         s0.append(x)
#
# print(*(so + s0 + sp), sep='\n' )


# n = int(input())
# sp1 = []
# sp2 = []
# sp3 = []
#
# for i in range (n):
#      sp1.append(input())
#
# x = input()
# for c in range (len(sp1)):
#     sp3.append(sp1[c].lower())
#     if sp3[c].find(x.lower()) != -1:
#          sp2.append(sp1[c])
# print(*sp2, sep='\n')
#

# n = int(input())
# a, b, c = [], [], []
# for i in range(n):
#     a.append(input())
# k = int(input())
# for j in range(k):
#     b.append(input())
# for h in range(len(a)):
#     count = 0
#     for g in range (len(b)):
#         if b[g].lower() in a[h].lower():
#             count += 1
#     if count == len(b):
#         c.append(a[h])
# print(*c, sep='\n')

# numbers = input().split('.')
# counter = 0
#
# for i in range(len(numbers)):
#     numbers[i] = int(numbers[i])
#     if 256 > (numbers[i]) >= 0:
#         counter += 1
# if counter == 4:
#     print('–î–ê')
# else:
#     print('–ù–ï–¢')

#
# words = input()
# s = input().join(words)
# print(s)


# def draw_box():
#     print('*' * 10)
#     for i in range (0, 13):
#         print('*        *')
#     print('*' * 10)
#
# draw_box()
#
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def draw_triangle():
#     for i in range (11):
#         print('*' * i)

# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

# def draw_triangle(fill, base):  # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
# base = base//2
# for i in range(base + 1):
#     print(fill * i)
#
# for i in range(base + 1, 0, -1):
#     print(fill * i)
#
# draw_triangle(input(), int(input()))
#
# name = input()
# familia = input()
# ot = input()
#
# print(familia[0].upper(), end='')
# print(name[0].upper(), end='')
# print(ot[0].upper(), end='')


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def print_fio(name, surname, patronymic):
#     print(name[0].upper(), end='')
#     print(surname[0].upper(), end='')
#     print(patronymic[0].upper(), end='')
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# name, surname, patronymic = input(), input(), input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print_fio(surname, name, patronymic)

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def print_digit_sum(num):
#     counter = 0
#     while num > 0:
#         counter += (num % 10)
#         num //= 10
#     print(counter)
#
#
# # # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# #
# # # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print_digit_sum(n)

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def convert_to_miles(km):
#     miles = km * 0.6214
#     return miles
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(convert_to_miles(num))


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_days(month):
#     months_31 = [1, 3, 5, 7, 8, 10, 12]
#     months_30 = [4, 6, 9, 11]
#     months_28 = [2]
#
#     if month in months_31:
#         return 31
#     elif month in months_30:
#         return 30
#     elif month in months_28:
#         return 28
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_days(num))

#
# n = int(input())  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤–µ—Å—Ç–∏ –≤ 3 —Å—Ç–µ–ø–µ–Ω—å
# massive = []
#
# for i in range(1, n + 1):
#     if n % i == 0:
#         massive.append(i)
# print(massive)


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):
#     massive = []
#     counter = 0
#     for i in range(1, n + 1):
#         if n % i == 0:
#             counter += 1
#     return counter
#
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_factors(n))


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     stri = []
#     for i in range(len(target)):
#         if target[i] == symbol:
#             stri.append(i)
#     return stri
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# s = input()
# char = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(find_all(s, char))


# # # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def merge(list1, list2):
#     list3 = list2 + list1
#     list3.sort()
#     return list3
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(merge(numbers1, numbers2))

# list = [5, 4, 3, 2, 1]
# list.sort()
# print(list)

# def quick_merge2(list1, list2):
#     list3 = list2 + list1
#     list3.sort()
#     return list3
#
#
# total_list = []
#
# for i in range(int(input())):
#     num = [int(q) for q in input().split()]
#     total_list = quick_merge2(total_list, num)
# print(*total_list)


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_valid_triangle(side1, side2, side3):
#     if ((side1 + side2 > side3) and (side1 + side3 > side2) and (side2 + side3 > side1)):
#         return True
#     else:
#         return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_valid_triangle(a, b, c))


# def get_factors(num):
#     for i in range(1, n+1):
#         if  n > 1:
#             return False
#         else:
#             return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_factors(n))

# –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ 1 –∏ –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ –Ω–∞ x

# n = int(input())

# flag = True
# for i in range (1, n+1):
#     if n > 1 and i % n ==0:
#         flag = True
#     else:
#         flag = False

# print(n/1)
# print(n/n)

# n = int(input())


# def is_prime(num):
#     counter = 0
#     for i in range(1, n + 1):
#         if (n % i) == 0:
#             counter += 1
#     if counter > 2 or n <= 1:
#         return False
#     else:
#         return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_prime(n))


# # –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num
# def is_prime_next(num):
#     counter = 0
#     while counter <= 0:
#
#         counter = 0
#         for i in range(1, n + 1):
#             if (n % i) == 0:
#                 counter += 1
#
#     if (num + 1) % (num + 1) == 0:
#         counter += 1
#     num += 1
#
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#
#
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_prime_next(n))


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ word1 –∏ word2 –∏
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–∏–º–≤–æ–ª–µ –∏ False  –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.


# def is_one_away(word1, word2):
#     counter = 0
#     if len(word1) == len(word2):
#         for i in range(len(word1)):
#             if word1[i] != word2[i]:
#                 counter += 1
#     else:
#         return False
#
#     if counter >= 2 or counter ==0:
#         return False
#     else:
#         return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt1 = input()
# txt2 = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_one_away(txt1, txt2))

#
# def is_my_first_function(a):
#     counter_1 = 0
#     counter_2 = 0
#     counter_3 = 0
#     if len(a) >= 8:
#         for i in range(len(a)):
#             if 90 >= ord(a[i]) >= 65:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
#                 counter_1 += 1
#             if 122 >= ord(a[i]) >= 97:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
#                 counter_2 += 10
#             if 57 >= ord(a[i]) >= 48:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä–∞
#                 counter_3 += 100
#     if counter_1 != 0 and counter_2 != 0 and counter_3 !=0:
#         return True
#     else:
#         return False
#
# password = input()
# print(is_my_first_function(password))

# —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ –Ω–µ—Ç.

def is_prime_next(num):
    counter = 0
    for i in range(1, num + 1):
        if (num % i) == 0:
            counter += 1
    if counter > 2 or num <= 1:
        return False
    else:
        return True

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
c = int(input())
c += 1

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
while is_prime_next(c) != True:
    c += 1
print(c)

